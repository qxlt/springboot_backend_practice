version: '3.9'

services:

  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: ["start-dev", "--import-realm"]
    environment:
      DB_VENDOR: postgres
      DB_ADOR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANNER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/realms:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - spring


  postgres-keycloak:
    image: postgres
    ports:
      - "5434:5432"
    container_name: postgres-keycloak
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - PGDATA=/data/postgres
    volumes:
      - ./data/keycloak:/var/lib/postgresql/data
    networks:
      - spring

  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring

  broker:
    container_name: broker
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092, PLAINTEXT_HOST://host.docker.internal:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - spring

  schema-registry:
    image: confluentinc/cp-schema-registry
    hostname: schema-registry
    ports:
      - "8087:8087"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8087
    depends_on:
      - broker
    networks:
      - spring

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui
    ports:
      - "8086:8086"
    environment:
      SERVER_PORT: 8086
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8087
    depends_on:
      - broker
      - schema-registry
    networks:
      - spring

  notification-service:
#    image: notification-service
    ports:
      - "8088:8088"
    build:
      context: ./notification-microservices
      dockerfile: ./Dockerfile
    container_name: notification-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - spring



  api-gateway:
    image: api-gateway
    container_name: api-gateway
    ports:
      - "9000:9000"
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - spring


  order-service:
    image: order-service
    ports:
      - "8084:8084"
    build:
      context: ./order-microservice
      dockerfile: ../order-microservice/Dockerfile
    container_name: order-microservice-manual
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-order
    networks:
      - spring


  postgres-order:
    image: postgres
    ports:
      - "5432:5432"
    container_name: postgres-order-ice
    restart: always
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/order:/var/lib/postgresql/data
      - ./init/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring


  inventory-service:
    image: inventory-service
    ports:
      - "8082:8082"
    build:
      context: ./inventory-microservice
      dockerfile: ../inventory-microservice/Dockerfile
    container_name: inventory-service-ice
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-inventory
    networks:
      - spring


  postgres-inventory:
    image: postgres
    ports:
      - "5433:5432"
    container_name: postgres-inventory-ice
    restart: always
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=inventory-service
    volumes:
      - ./data/inventory:/var/lib/postgresql/data
      - ./init/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring


  pgadmin-inventory:
    image: dpage/pgadmin4
    ports:
      - "8889:80"
    container_name: pgadmin-ice
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    networks:
      - spring

  product-service:
    image: product-service
    ports:
      - "8083:8083"
    build:
      context: ./product-microservice
      dockerfile: ../product-microservice/Dockerfile
    container_name: product-microservice-ice
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  mongodb:
    image: mongo:latest
    container_name: mongodb-ice
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/product/products:/data/db
      - ./init/product/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    #    restart: unless-stopped
    command: mongod --auth
    networks:
      - spring


  mongo-express:
    image: mongo-express
    container_name: mongo-express-ice
    ports:
      - "8085:8085"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017
    depends_on:
      - mongodb
    networks:
      - spring

networks:
  spring:
    driver: bridge