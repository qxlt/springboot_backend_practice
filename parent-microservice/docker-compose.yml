# ----------------------------------------------------------------------------------------------------------------
# create networks
# -p give me a folder, brings up all the containers
# 1. docker-compose -p comp3095-microservices-ecommerce -f docker-compose.yml up -d
#     -- This command will start the containers in detached made without rebuilding the images (if they exist)
#
# 2. docker-compose -p comp3095-microservices-ecommerce -f docker-compose.yml up -d --build
#     -- This command force the rebuild of all images, even if already exist, before starting the containers
# ----------------------------------------------------------------------------------------------------------------

version: "3.9"

services:

  product-service:
    image: product-service
    ports:
      - "8084:8084"
    build:
      context: product-microservice
      dockerfile: ../../product-microservice/Dockerfile
    container_name: product-microservice-manual
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  mongodb:
    image: mongo:latest
    container_name: mongodb-manual
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
#    restart: unless-stopped
    command: mongod --auth
    networks:
      - spring

  mongo-express:
    image: mongo-express
    container_name: mongo-express-manual
    ports:
      - "8085:8085"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017
    depends_on:
      - mongodb
    networks:
      - spring

volumes:
  mongodb:
    driver: local # use local driver for persisting data on the host machine

networks:
  spring:
    driver: bridge # bridge network allows isolated communication between containers




