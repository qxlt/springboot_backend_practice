version: '3.9'

services:

  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: ["start-dev", "--import-realm"]
    environment:
      DB_VENDOR: postgres
      DB_ADOR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANNER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/realms:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - spring


  postgres-keycloak:
    image: postgres
    ports:
      - "5434:5432"
    container_name: postgres-keycloak
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - PGDATA=/data/postgres
    volumes:
      - ./data/keycloak:/var/lib/postgresql/data
    networks:
      - spring


  api-gateway:
    image: api-gateway
    container_name: api-gateway
    ports:
      - "9000:9000"
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - spring


  order-service:
    image: order-service
    ports:
      - "8084:8084"
    build:
      context: ./order-microservice
      dockerfile: ../order-microservice/Dockerfile
    container_name: order-microservice-manual
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-order
    networks:
      - spring


  postgres-order:
    image: postgres
    ports:
      - "5432:5432"
    container_name: postgres-order-ice
    restart: always
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/order:/var/lib/postgresql/data
      - ./init/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring


  inventory-service:
    image: inventory-service
    ports:
      - "8082:8082"
    build:
      context: ./inventory-microservice
      dockerfile: ../inventory-microservice/Dockerfile
    container_name: inventory-service-ice
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-inventory
    networks:
      - spring


  postgres-inventory:
    image: postgres
    ports:
      - "5433:5432"
    container_name: postgres-inventory-ice
    restart: always
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=inventory-service
    volumes:
      - ./data/inventory:/var/lib/postgresql/data
      - ./init/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring


  pgadmin-inventory:
    image: dpage/pgadmin4
    ports:
      - "8889:80"
    container_name: pgadmin-ice
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    networks:
      - spring

  product-service:
    image: product-service
    ports:
      - "8086:8086"
    build:
      context: ./product-microservice
      dockerfile: ../product-microservice/Dockerfile
    container_name: product-microservice-ice
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  mongodb:
    image: mongo:latest
    container_name: mongodb-ice
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/product/products:/data/db
      - ./init/product/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    #    restart: unless-stopped
    command: mongod --auth
    networks:
      - spring


  mongo-express:
    image: mongo-express
    container_name: mongo-express-ice
    ports:
      - "8085:8085"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017
    depends_on:
      - mongodb
    networks:
      - spring

networks:
  spring:
    driver: bridge